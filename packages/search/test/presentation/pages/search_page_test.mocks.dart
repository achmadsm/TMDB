// Mocks generated by Mockito 5.4.2 from annotations
// in search/test/presentation/pages/search_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:core/utils/state_enum.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/entities/movie.dart' as _i5;
import 'package:search/domain/usecases/search_movies.dart' as _i2;
import 'package:search/domain/usecases/search_tv_shows.dart' as _i3;
import 'package:search/presentation/provider/movie_search_notifier.dart' as _i4;
import 'package:search/presentation/provider/tv_search_notifier.dart' as _i9;
import 'package:tv/domain/entities/tv.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchMovies_0 extends _i1.SmartFake implements _i2.SearchMovies {
  _FakeSearchMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchTvShows_1 extends _i1.SmartFake implements _i3.SearchTvShows {
  _FakeSearchTvShows_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieSearchNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieSearchNotifier extends _i1.Mock
    implements _i4.MovieSearchNotifier {
  MockMovieSearchNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchMovies get searchMovies => (super.noSuchMethod(
        Invocation.getter(#searchMovies),
        returnValue: _FakeSearchMovies_0(
          this,
          Invocation.getter(#searchMovies),
        ),
      ) as _i2.SearchMovies);

  @override
  List<_i5.Movie> get searchResult => (super.noSuchMethod(
        Invocation.getter(#searchResult),
        returnValue: <_i5.Movie>[],
      ) as List<_i5.Movie>);

  @override
  _i6.RequestState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.RequestState.empty,
      ) as _i6.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: '',
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> fetchMovieSearch(String? query) => (super.noSuchMethod(
        Invocation.method(
          #fetchMovieSearch,
          [query],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSearchNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSearchNotifier extends _i1.Mock implements _i9.TvSearchNotifier {
  MockTvSearchNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SearchTvShows get searchTvShows => (super.noSuchMethod(
        Invocation.getter(#searchTvShows),
        returnValue: _FakeSearchTvShows_1(
          this,
          Invocation.getter(#searchTvShows),
        ),
      ) as _i3.SearchTvShows);

  @override
  List<_i10.Tv> get searchResult => (super.noSuchMethod(
        Invocation.getter(#searchResult),
        returnValue: <_i10.Tv>[],
      ) as List<_i10.Tv>);

  @override
  _i6.RequestState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.RequestState.empty,
      ) as _i6.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: '',
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> fetchTvSearch(String? query) => (super.noSuchMethod(
        Invocation.method(
          #fetchTvSearch,
          [query],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
